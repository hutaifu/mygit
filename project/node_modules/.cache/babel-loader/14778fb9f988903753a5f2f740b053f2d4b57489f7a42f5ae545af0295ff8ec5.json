{"ast":null,"code":"import Vue from \"vue\";\nexport function addComponent(vue, compoenent, elString, templateString) {\n  //原生事件不要加，\n  //js表达式相关逻辑处理没有\n  //作用域插槽总配置项\n  let scopedSlots = {};\n  let myComp;\n  //得到组件构造函数\n  let Compoent = Vue.extend(compoenent);\n  let tree = parseHTML(templateString);\n  dealTree(tree[0], (obj, parent) => {\n    //如果父组件是作用域插槽\n    let slotScope = \"\";\n    if (parent?.slotKey) {\n      slotScope = parent.attributes[parent.slotKey];\n    }\n    //找到绑定事件\n    let on = {};\n    let props = {};\n    let nativeOn = {};\n    let key = \"\";\n    let ref = \"\";\n    let attrs = {};\n    if (obj.tagName === \"template\") {\n      //插槽\n      //是否有v-slot属性\n      let sltoKey = Object.keys(obj.attributes).filter(item => /^v-slot:/.test(item))[0];\n      let afterSltoKey = sltoKey.replace(/^v-slot:/, \"\");\n      if (afterSltoKey && afterSltoKey !== 'default') {\n        //是否有参数\n        if (obj.attributes[sltoKey]) {\n          //作用域插槽\n          scopedSlots[afterSltoKey] = afterSltoKey;\n          obj.slotKey = sltoKey;\n          obj._vnodeConfig = [obj.tagName, {}];\n        } else {\n          //非传参插槽\n          obj._vnodeConfig = [obj.tagName, {\n            slot: obj.attributes[sltoKey]\n          }];\n        }\n      } else {\n        //默认插槽\n        obj._vnodeConfig = [obj.tagName, {\n          slot: 'default'\n        }];\n      }\n    }\n    if (obj.attributes && obj.tagName !== 'template') {\n      let keys = Object.keys(obj.attributes);\n\n      // 匹配以 @ 或 v-on: 开头的事件绑定\n      getEventBindings(/(?:@|v-on:)([a-zA-Z]+)(?:\\.([\\w.]+))*(?![\\w.-]*\\.native(?:$|\\B))/);\n\n      // 匹配事件绑定\n      function getEventBindings(regex) {\n        let matchedKeys = keys.filter(item => regex.test(item));\n        matchedKeys.forEach(item => {\n          // 匹配事件名和修饰符\n          let match = item.match(regex);\n          if (match) {\n            let eventName = match[1]; // 获取事件名\n            let modifiers = match[2]; // 获取修饰符\n            // 检查事件名是否存在于组件定义中，如果存在则说明是组件事件，否则是原生事件\n            let fn = vue[obj.attributes[item]];\n            //是否为插槽\n            /*       if(slotScope && !fn){\r\n                     }*/\n            if (match[2] !== 'native') {\n              on[eventName] = fn?.bind(vue);\n            } else {\n              nativeOn[eventName] = fn?.bind(vue);\n            }\n          }\n        });\n      }\n\n      // 匹配以 : 或 v-bind 开头的属性绑定，但排除掉 ref、class、key、style\n      getProp(props, /^(:|v-bind:)/);\n      // 单独处理 ref, class, key, style 属性\n      let refValue = keys.filter(item => /^(:|v-bind:)*ref$/.test(item))[0];\n      if (refValue) {\n        if (vue[obj.attributes[refValue]]) {\n          ref = vue[obj.attributes[refValue]];\n        } else {\n          ref = obj.attributes[refValue];\n        }\n      }\n      let keyValue = keys.filter(item => /^(:|v-bind:)*key$/.test(item))[0];\n      if (keyValue) {\n        if (vue[obj.attributes[keyValue]]) {\n          key = vue[obj.attributes[keyValue]];\n        } else {\n          key = obj.attributes[keyValue];\n        }\n      }\n      //处理原生属性\n      keys.filter(item => !/^(@|:|v-)/.test(item)).forEach(item => {\n        attrs[item] = obj.attributes[item];\n      });\n      let options = {\n        on,\n        props,\n        nativeOn,\n        attrs,\n        ref,\n        key\n      };\n      if (Object.keys(on).length === 0) {\n        delete options.on;\n      }\n      if (Object.keys(nativeOn).length === 0) {\n        delete options.nativeOn;\n      }\n      //生成虚拟dom\n      obj._vnodeConfig = [obj.tagName, options];\n    } else if (obj.content) {\n      //如果是文本节点，\n      if (slotScope) {\n        obj.content = convertToTemplateString(obj.content, slotScope);\n      }\n      obj._vnodeConfig = [obj.content];\n    }\n  });\n  //拼接vnode\n  let vNodesTree = concatVNodes(tree[0]);\n  //挂载组件\n  myComp = new Compoent({\n    _isComponent: true,\n    parent: vue,\n    _parentVnode: vNodesTree\n  }).$mount(elString);\n  function concatVNodes(node, isOneLevel = true) {\n    if (!node || !node._vnodeConfig) {\n      return '';\n    }\n    if (isOneLevel) {\n      node._vnodeConfig[0] = compoenent;\n    }\n    // let result = node._vnode;\n    if (node.children && node.children.length > 0) {\n      let childrenVnod = [];\n      node.children.forEach(child => {\n        childrenVnod.push(concatVNodes(child, false));\n        if (Object.keys(scopedSlots)?.includes(node.slotKey?.replace(/^v-slot:/, \"\"))) {\n          scopedSlots[node.slotKey.replace(/^v-slot:/, \"\")] = props => {\n            debugger;\n            let str = JSON.stringify(childrenVnod[childrenVnod.length - 1]).replace(\"[[\", \"${\").replace(\"]]\", \"}\");\n            return JSON.parse(eval(`\\`${str}\\``));\n          };\n        }\n      });\n      if (isOneLevel && Object.keys(scopedSlots).length !== 0) {\n        if (!node._vnodeConfig[1]) {\n          node._vnodeConfig[1] = {};\n        }\n        node._vnodeConfig[1].scopedSlots = scopedSlots;\n      }\n      return vue.$createElement(...node._vnodeConfig, childrenVnod);\n    } else {\n      //末级节点\n      if (node._vnodeConfig.length !== 1) {\n        return vue.$createElement(...node._vnodeConfig);\n      } else {\n        return node._vnodeConfig;\n      }\n    }\n  }\n}\nfunction parseHTML(htmlString) {\n  const stack = [];\n  const root = {\n    tagName: 'root',\n    attributes: {},\n    children: []\n  };\n  let current = root;\n  stack.push(current);\n  const regex = /<([a-zA-Z0-9]+)([^>]*)>|<\\/([a-zA-Z0-9]+)>|([^<>]+)/g;\n  let match;\n  while ((match = regex.exec(htmlString)) !== null) {\n    const [text, openTag, attributes, closeTag, plainText] = match;\n    if (openTag) {\n      const node = {\n        tagName: openTag,\n        attributes: parseAttributes(attributes),\n        children: []\n      };\n      current.children.push(node);\n      stack.push(node);\n      current = node;\n    } else if (closeTag) {\n      stack.pop();\n      current = stack[stack.length - 1];\n    } else if (plainText && plainText.trim()) {\n      current.children.push({\n        content: plainText.trim()\n      });\n    }\n  }\n  return root.children;\n}\nfunction parseAttributes(attributeString) {\n  const attributes = {};\n  const attrRegex = /([^=\\s]+)\\s*=\\s*(['\"])(.*?)\\2|\\b([^=\\s]+)\\b/g;\n  let match;\n  while ((match = attrRegex.exec(attributeString)) !== null) {\n    const [, name, quote, value] = match;\n    if (name && value !== undefined) {\n      attributes[name] = value;\n    } else if (name) {\n      // 处理没有指定值的属性\n      attributes[name] = true;\n    }\n  }\n  return attributes;\n}\n\n//递归函数\nfunction dealTree(tree, callback, parent) {\n  {\n    if (typeof tree === \"object\") {\n      callback(tree, parent);\n      if (tree?.children?.length > 0) {\n        tree.children.forEach(item => {\n          dealTree(item, callback, tree);\n        });\n      }\n    }\n  }\n}\nfunction convertToTemplateString(fixedString, dynamicIdentifier) {\n  let resString = `({{)(${dynamicIdentifier})(\\\\..+)*}}`;\n  // 将动态部分的标识符添加到固定字符串中，以便后续替换\n  let stringWithIdentifier = fixedString.replace(new RegExp(resString, 'g'), function ($1, $2, $3, $4) {\n    return `[[props${$4 ? $4 : ''}]]`;\n  });\n  return stringWithIdentifier;\n}\n\n// 获取属性并处理类型\nfunction getProp(optionsPropertyObj, rel) {\n  let afterKeys = keys.filter(item => rel.test(item) && !/(ref|class|key|style)$/.test(item));\n  afterKeys.forEach(item => {\n    let afterItem = item.replace(rel, \"\");\n    let value = obj.attributes[item];\n    // 处理布尔类型\n    if (value === \"false\") {\n      optionsPropertyObj[item] = false;\n    } else if (value === \"true\") {\n      optionsPropertyObj[item] = true;\n    } else if (!isNaN(Number(value))) {\n      // 检查是否为数字\n      optionsPropertyObj[item] = Number(value); // 转换为数字\n    } else {\n      // 其他情况，假设是绑定的属性\n      if (vue[value]) {\n        optionsPropertyObj[afterItem] = vue[value]; // 绑定属性\n        vue.$watch(value, {\n          handler(n, o) {\n            myComp[afterItem] = vue[value];\n            myComp.$forceUpdate();\n          },\n          deep: true\n        });\n      }\n    }\n  });\n}","map":{"version":3,"names":["Vue","addComponent","vue","compoenent","elString","templateString","scopedSlots","myComp","Compoent","extend","tree","parseHTML","dealTree","obj","parent","slotScope","slotKey","attributes","on","props","nativeOn","key","ref","attrs","tagName","sltoKey","Object","keys","filter","item","test","afterSltoKey","replace","_vnodeConfig","slot","getEventBindings","regex","matchedKeys","forEach","match","eventName","modifiers","fn","bind","getProp","refValue","keyValue","options","length","content","convertToTemplateString","vNodesTree","concatVNodes","_isComponent","_parentVnode","$mount","node","isOneLevel","children","childrenVnod","child","push","includes","str","JSON","stringify","parse","eval","$createElement","htmlString","stack","root","current","exec","text","openTag","closeTag","plainText","parseAttributes","pop","trim","attributeString","attrRegex","name","quote","value","undefined","callback","fixedString","dynamicIdentifier","resString","stringWithIdentifier","RegExp","$1","$2","$3","$4","optionsPropertyObj","rel","afterKeys","afterItem","isNaN","Number","$watch","handler","n","o","$forceUpdate","deep"],"sources":["D:/mygit/project/src/js/addCompoent.js"],"sourcesContent":["import Vue from \"vue\";\r\n\r\nexport function addComponent(vue, compoenent, elString, templateString) {\r\n//原生事件不要加，\r\n    //js表达式相关逻辑处理没有\r\n    //作用域插槽总配置项\r\n    let scopedSlots = {};\r\n    let myComp;\r\n    //得到组件构造函数\r\n    let Compoent = Vue.extend(compoenent);\r\n    let tree = parseHTML(templateString);\r\n    dealTree(tree[0], (obj, parent) => {\r\n        //如果父组件是作用域插槽\r\n        let slotScope = \"\";\r\n        if (parent?.slotKey){\r\n            slotScope = parent.attributes[parent.slotKey]\r\n        }\r\n        //找到绑定事件\r\n        let on = {};\r\n        let props = {};\r\n        let nativeOn = {};\r\n        let key = \"\";\r\n        let ref = \"\";\r\n        let attrs = {};\r\n        if (obj.tagName === \"template\"){\r\n            //插槽\r\n            //是否有v-slot属性\r\n            let sltoKey =  Object.keys(obj.attributes).filter(item =>/^v-slot:/.test(item))[0];\r\n            let afterSltoKey = sltoKey.replace(/^v-slot:/,\"\");\r\n            if (afterSltoKey && afterSltoKey !== 'default'){\r\n                //是否有参数\r\n                if (obj.attributes[sltoKey]){\r\n                    //作用域插槽\r\n                    scopedSlots[afterSltoKey] = afterSltoKey;\r\n                    obj.slotKey = sltoKey;\r\n                    obj._vnodeConfig = [obj.tagName,{}]\r\n                }else {\r\n                    //非传参插槽\r\n                    obj._vnodeConfig = [obj.tagName,{slot:obj.attributes[sltoKey]}]\r\n                }\r\n            }else {\r\n                //默认插槽\r\n                obj._vnodeConfig = [obj.tagName,{slot:'default'}]\r\n            }\r\n        }\r\n        if (obj.attributes && obj.tagName !== 'template') {\r\n            let keys = Object.keys(obj.attributes)\r\n\r\n\r\n            // 匹配以 @ 或 v-on: 开头的事件绑定\r\n            getEventBindings(/(?:@|v-on:)([a-zA-Z]+)(?:\\.([\\w.]+))*(?![\\w.-]*\\.native(?:$|\\B))/);\r\n            \r\n            // 匹配事件绑定\r\n            function getEventBindings(regex) {\r\n                let matchedKeys = keys.filter(item => regex.test(item));\r\n                matchedKeys.forEach(item => {\r\n                    // 匹配事件名和修饰符\r\n                    let match = item.match(regex);\r\n                    if (match) {\r\n                        let eventName = match[1]; // 获取事件名\r\n                        let modifiers = match[2]; // 获取修饰符\r\n                        // 检查事件名是否存在于组件定义中，如果存在则说明是组件事件，否则是原生事件\r\n                        let fn = vue[obj.attributes[item]];\r\n                        //是否为插槽\r\n                        /*       if(slotScope && !fn){\r\n\r\n                               }*/\r\n                        if (match[2] !== 'native') {\r\n                            on[eventName] = fn?.bind(vue);\r\n                        } else {\r\n                            nativeOn[eventName] = fn?.bind(vue);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n// 匹配以 : 或 v-bind 开头的属性绑定，但排除掉 ref、class、key、style\r\n            getProp(props, /^(:|v-bind:)/);\r\n            // 单独处理 ref, class, key, style 属性\r\n            let refValue = keys.filter(item => /^(:|v-bind:)*ref$/.test(item))[0];\r\n            if (refValue) {\r\n                if (vue[obj.attributes[refValue]]) {\r\n                    ref = vue[obj.attributes[refValue]];\r\n                } else {\r\n                    ref = obj.attributes[refValue];\r\n                }\r\n            }\r\n            let keyValue = keys.filter(item => /^(:|v-bind:)*key$/.test(item))[0];\r\n            if (keyValue) {\r\n                if (vue[obj.attributes[keyValue]]) {\r\n                    key = vue[obj.attributes[keyValue]];\r\n                } else {\r\n                    key = obj.attributes[keyValue]\r\n                }\r\n            }\r\n            //处理原生属性\r\n            keys.filter(item => !/^(@|:|v-)/.test(item)).forEach(item => {\r\n                attrs[item] = obj.attributes[item]\r\n            })\r\n            let options = {on, props, nativeOn, attrs, ref, key};\r\n            if (Object.keys(on).length === 0) {\r\n                delete options.on;\r\n            }\r\n            if (Object.keys(nativeOn).length === 0) {\r\n                delete options.nativeOn;\r\n            }\r\n            //生成虚拟dom\r\n            obj._vnodeConfig = [obj.tagName, options];\r\n        }else if (obj.content) {\r\n            //如果是文本节点，\r\n            if (slotScope){\r\n               obj.content =  convertToTemplateString(obj.content,slotScope)\r\n            }\r\n                obj._vnodeConfig = [obj.content];\r\n        }\r\n    })\r\n    //拼接vnode\r\n    let vNodesTree = concatVNodes(tree[0]);\r\n    //挂载组件\r\n    myComp = new Compoent({\r\n        _isComponent: true, parent: vue, _parentVnode: vNodesTree\r\n    }).$mount(elString);\r\n\r\n\r\n    function concatVNodes(node, isOneLevel = true) {\r\n        if (!node || !node._vnodeConfig) {\r\n            return '';\r\n        }\r\n        if (isOneLevel) {\r\n            node._vnodeConfig[0] = compoenent;\r\n        }\r\n        // let result = node._vnode;\r\n        if (node.children && node.children.length > 0) {\r\n            let childrenVnod = [];\r\n            node.children.forEach(child => {\r\n                childrenVnod.push(concatVNodes(child, false));\r\n                if(Object.keys(scopedSlots)?.includes(node.slotKey?.replace(/^v-slot:/,\"\"))){\r\n                    scopedSlots[node.slotKey.replace(/^v-slot:/,\"\")] =(props)=> {\r\n                        debugger\r\n                        let str = JSON.stringify(childrenVnod[childrenVnod.length - 1]).replace(\"[[\",\"${\").replace(\"]]\",\"}\");\r\n                        return JSON.parse(eval(`\\`${str}\\``));}\r\n                }\r\n            });\r\n            if (isOneLevel && Object.keys(scopedSlots).length !== 0){\r\n                if (!node._vnodeConfig[1]){\r\n                    node._vnodeConfig[1] = {};\r\n                }\r\n                node._vnodeConfig[1].scopedSlots = scopedSlots;\r\n            }\r\n            return vue.$createElement(...node._vnodeConfig, childrenVnod)\r\n        } else {\r\n            //末级节点\r\n            if (node._vnodeConfig.length !== 1) {\r\n                return vue.$createElement(...node._vnodeConfig)\r\n            } else {\r\n                return node._vnodeConfig;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseHTML(htmlString) {\r\n    const stack = [];\r\n    const root = {tagName: 'root', attributes: {}, children: []};\r\n    let current = root;\r\n    stack.push(current);\r\n\r\n    const regex = /<([a-zA-Z0-9]+)([^>]*)>|<\\/([a-zA-Z0-9]+)>|([^<>]+)/g;\r\n\r\n    let match;\r\n\r\n    while ((match = regex.exec(htmlString)) !== null) {\r\n        const [text, openTag, attributes, closeTag, plainText] = match;\r\n        if (openTag) {\r\n            const node = {tagName: openTag, attributes: parseAttributes(attributes), children: []};\r\n            current.children.push(node);\r\n            stack.push(node);\r\n            current = node;\r\n        } else if (closeTag) {\r\n            stack.pop();\r\n            current = stack[stack.length - 1];\r\n        } else if (plainText && plainText.trim()) {\r\n            current.children.push({content: plainText.trim()});\r\n        }\r\n    }\r\n\r\n    return root.children;\r\n}\r\n\r\nfunction parseAttributes(attributeString) {\r\n    const attributes = {};\r\n    const attrRegex = /([^=\\s]+)\\s*=\\s*(['\"])(.*?)\\2|\\b([^=\\s]+)\\b/g;\r\n\r\n    let match;\r\n    while ((match = attrRegex.exec(attributeString)) !== null) {\r\n        const [, name, quote, value] = match;\r\n        if (name && value !== undefined) {\r\n            attributes[name] = value;\r\n        } else if (name) {\r\n            // 处理没有指定值的属性\r\n            attributes[name] = true;\r\n        }\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n//递归函数\r\nfunction dealTree(tree, callback,parent) {\r\n    {\r\n        if (typeof tree === \"object\"){\r\n            callback(tree, parent);\r\n            if (tree?.children?.length > 0) {\r\n                tree.children.forEach(item =>{\r\n                    dealTree(item,callback,tree);\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction convertToTemplateString(fixedString, dynamicIdentifier) {\r\n    let resString = `({{)(${dynamicIdentifier})(\\\\..+)*}}`\r\n    // 将动态部分的标识符添加到固定字符串中，以便后续替换\r\n    let stringWithIdentifier = fixedString.replace(new RegExp(resString,'g'), function ($1,$2,$3,$4){\r\n       return `[[props${$4?$4:''}]]`\r\n    });\r\n    return stringWithIdentifier;\r\n}\r\n\r\n// 获取属性并处理类型\r\nfunction getProp(optionsPropertyObj, rel) {\r\n\r\n    let afterKeys = keys.filter(item => rel.test(item) && !/(ref|class|key|style)$/.test(item));\r\n    afterKeys.forEach(item => {\r\n        let afterItem = item.replace(rel, \"\");\r\n        let value = obj.attributes[item];\r\n        // 处理布尔类型\r\n        if (value === \"false\") {\r\n            optionsPropertyObj[item] = false;\r\n        } else if (value === \"true\") {\r\n            optionsPropertyObj[item] = true;\r\n        } else if (!isNaN(Number(value))) { // 检查是否为数字\r\n            optionsPropertyObj[item] = Number(value); // 转换为数字\r\n        } else { // 其他情况，假设是绑定的属性\r\n            if (vue[value]) {\r\n                optionsPropertyObj[afterItem] = vue[value]; // 绑定属性\r\n                vue.$watch(value, {\r\n                    handler(n, o) {\r\n                        myComp[afterItem] = vue[value];\r\n                        myComp.$forceUpdate();\r\n                    }, deep: true,\r\n                })\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}