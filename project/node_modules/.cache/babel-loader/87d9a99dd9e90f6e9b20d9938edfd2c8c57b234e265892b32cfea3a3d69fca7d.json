{"ast":null,"code":"import Vue from \"vue\";\nexport function addComponent(vue, compoenent, elString, templateString) {\n  let myComp;\n  //得到组件构造函数\n  let Compoent = Vue.extend(compoenent);\n  let tree = parseHTML(templateString);\n  dealTree(tree, (obj, parent) => {\n    //找到绑定事件\n    let on = {};\n    let props = {};\n    let nativeOn = {};\n    let key = \"\";\n    let ref = \"\";\n    let attrs = {};\n    if (obj.attributes) {\n      let keys = Object.keys(obj.attributes);\n\n      // 匹配事件绑定\n      function getEventBindings(regex) {\n        let matchedKeys = keys.filter(item => regex.test(item));\n        matchedKeys.forEach(item => {\n          // 匹配事件名和修饰符\n          let match = item.match(regex);\n          if (match) {\n            let eventName = match[1]; // 获取事件名\n            let modifiers = match[2]; // 获取修饰符\n            // 检查事件名是否存在于组件定义中，如果存在则说明是组件事件，否则是原生事件\n            let fn = vue[obj.attributes[item]];\n            if (match[2] !== 'native') {\n              on[eventName] = fn?.bind(vue);\n            } else {\n              nativeOn[eventName] = fn?.bind(vue);\n            }\n          }\n        });\n      }\n\n      // 匹配以 @ 或 v-on: 开头的事件绑定\n      getEventBindings(/(?:@|v-on:)([a-zA-Z]+)(?:\\.([\\w.]+))*(?![\\w.-]*\\.native(?:$|\\B))/);\n\n      // 获取属性并处理类型\n      function getProp(optionsPropertyObj, rel) {\n        let afterKeys = keys.filter(item => rel.test(item) && !/(ref|class|key|style)$/.test(item));\n        afterKeys.forEach(item => {\n          let afterItem = item.replace(rel, \"\");\n          let value = obj.attributes[item];\n          // 处理布尔类型\n          if (value === \"false\") {\n            optionsPropertyObj[item] = false;\n          } else if (value === \"true\") {\n            optionsPropertyObj[item] = true;\n          } else if (!isNaN(Number(value))) {\n            // 检查是否为数字\n            optionsPropertyObj[item] = Number(value); // 转换为数字\n          } else {\n            // 其他情况，假设是绑定的属性\n            if (vue[value]) {\n              optionsPropertyObj[afterItem] = vue[value]; // 绑定属性\n              vue.$watch(value, {\n                handler(n, o) {\n                  myComp[afterItem] = vue[value];\n                  myComp.$forceUpdate();\n                },\n                deep: true\n              });\n            }\n          }\n        });\n      }\n\n      // 匹配以 : 或 v-bind 开头的属性绑定，但排除掉 ref、class、key、style\n      getProp(props, /^(:|v-bind:)/);\n      // 单独处理 ref, class, key, style 属性\n      let refValue = keys.filter(item => /^(:|v-bind:)*ref$/.test(item))[0];\n      if (refValue) {\n        if (vue[obj.attributes[refValue]]) {\n          ref = vue[obj.attributes[refValue]];\n        } else {\n          ref = obj.attributes[refValue];\n        }\n      }\n      let keyValue = keys.filter(item => /^(:|v-bind:)*key$/.test(item))[0];\n      if (keyValue) {\n        if (vue[obj.attributes[keyValue]]) {\n          key = vue[obj.attributes[keyValue]];\n        } else {\n          key = obj.attributes[keyValue];\n        }\n      }\n      //处理原生属性\n      keys.filter(item => !/^(@|:|v-)/.test(item)).forEach(item => {\n        attrs[item] = obj.attributes[item];\n      });\n      let options = {\n        on,\n        props,\n        nativeOn,\n        attrs,\n        ref,\n        key\n      };\n      if (JSON.stringify(on) === JSON.stringify({})) {\n        delete options.on;\n      }\n      if (JSON.stringify(nativeOn) === JSON.stringify({})) {\n        delete options.nativeOn;\n      }\n      //生成虚拟dom\n      obj._vnodeConfig = [obj.tagName, options];\n    }\n    if (obj.content) {\n      //如果是文本节点，\n      obj._vnodeConfig = [obj.content];\n    }\n  });\n  //拼接vnode\n  let vNodesTree = concatVNodes(tree[0]);\n  //挂载组件\n  myComp = new Compoent({\n    _isComponent: true,\n    parent: vue,\n    _parentVnode: vNodesTree\n  }).$mount(elString);\n  function concatVNodes(node, isOneLevel = true) {\n    if (!node || !node._vnodeConfig) {\n      return '';\n    }\n    if (isOneLevel) {\n      node._vnodeConfig[0] = compoenent;\n    }\n\n    // let result = node._vnode;\n\n    if (node.children && node.children.length > 0) {\n      let childrenVnod = [];\n      node.children.forEach(child => {\n        childrenVnod.push(concatVNodes(child, false));\n      });\n      return vue.$createElement(...node._vnodeConfig, childrenVnod);\n    } else {\n      //末级节点\n      if (node._vnodeConfig.length !== 1) {\n        return vue.$createElement(...node._vnodeConfig);\n      } else {\n        return node._vnodeConfig;\n      }\n    }\n  }\n}\nfunction parseHTML(htmlString) {\n  const stack = [];\n  const root = {\n    tagName: 'root',\n    attributes: {},\n    children: []\n  };\n  let current = root;\n  stack.push(current);\n  const regex = /<([a-zA-Z0-9]+)([^>]*)>|<\\/([a-zA-Z0-9]+)>|([^<>]+)/g;\n  let match;\n  while ((match = regex.exec(htmlString)) !== null) {\n    const [text, openTag, attributes, closeTag, plainText] = match;\n    if (openTag) {\n      const node = {\n        tagName: openTag,\n        attributes: parseAttributes(attributes),\n        children: []\n      };\n      current.children.push(node);\n      stack.push(node);\n      current = node;\n    } else if (closeTag) {\n      stack.pop();\n      current = stack[stack.length - 1];\n    } else if (plainText && plainText.trim()) {\n      current.children.push({\n        content: plainText.trim()\n      });\n    }\n  }\n  return root.children;\n}\nfunction parseAttributes(attributeString) {\n  const attributes = {};\n  const attrRegex = /([^=\\s]+)\\s*=\\s*(['\"])(.*?)\\2|\\b([^=\\s]+)\\b/g;\n  let match;\n  while ((match = attrRegex.exec(attributeString)) !== null) {\n    const [, name, quote, value] = match;\n    if (name && value !== undefined) {\n      attributes[name] = value;\n    } else if (name) {\n      // 处理没有指定值的属性\n      attributes[name] = true;\n    }\n  }\n  return attributes;\n}\n\n//递归函数\nfunction dealTree(tree, callback) {\n  if (Array.isArray(tree) && tree.length !== 0) {\n    tree.forEach(item => {\n      callback(item, tree);\n      if (item?.children?.length > 0) {\n        dealTree(item.children, callback);\n      }\n    });\n  }\n}","map":{"version":3,"names":["Vue","addComponent","vue","compoenent","elString","templateString","myComp","Compoent","extend","tree","parseHTML","dealTree","obj","parent","on","props","nativeOn","key","ref","attrs","attributes","keys","Object","getEventBindings","regex","matchedKeys","filter","item","test","forEach","match","eventName","modifiers","fn","bind","getProp","optionsPropertyObj","rel","afterKeys","afterItem","replace","value","isNaN","Number","$watch","handler","n","o","$forceUpdate","deep","refValue","keyValue","options","JSON","stringify","_vnodeConfig","tagName","content","vNodesTree","concatVNodes","_isComponent","_parentVnode","$mount","node","isOneLevel","children","length","childrenVnod","child","push","$createElement","htmlString","stack","root","current","exec","text","openTag","closeTag","plainText","parseAttributes","pop","trim","attributeString","attrRegex","name","quote","undefined","callback","Array","isArray"],"sources":["D:/mygit/addVueCom/myMethods/addCompoent.js"],"sourcesContent":["import Vue from \"vue\";\r\n\r\nexport function addComponent(vue, compoenent, elString, templateString) {\r\n    let myComp;\r\n    //得到组件构造函数\r\n    let Compoent = Vue.extend(compoenent);\r\n    let tree = parseHTML(templateString);\r\n    dealTree(tree, (obj, parent) => {\r\n        //找到绑定事件\r\n        let on = {};\r\n        let props = {};\r\n        let nativeOn = {};\r\n        let key = \"\";\r\n        let ref = \"\";\r\n        let attrs = {};\r\n\r\n        if (obj.attributes) {\r\n            let keys = Object.keys(obj.attributes)\r\n\r\n            // 匹配事件绑定\r\n            function getEventBindings(regex) {\r\n                let matchedKeys = keys.filter(item => regex.test(item));\r\n                matchedKeys.forEach(item => {\r\n                    // 匹配事件名和修饰符\r\n                    let match = item.match(regex);\r\n                    if (match) {\r\n                        let eventName = match[1]; // 获取事件名\r\n                        let modifiers = match[2]; // 获取修饰符\r\n                        // 检查事件名是否存在于组件定义中，如果存在则说明是组件事件，否则是原生事件\r\n                        let fn = vue[obj.attributes[item]];\r\n                        if (match[2] !== 'native') {\r\n                            on[eventName] = fn?.bind(vue);\r\n                        } else {\r\n                            nativeOn[eventName] = fn?.bind(vue);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // 匹配以 @ 或 v-on: 开头的事件绑定\r\n            getEventBindings(/(?:@|v-on:)([a-zA-Z]+)(?:\\.([\\w.]+))*(?![\\w.-]*\\.native(?:$|\\B))/);\r\n\r\n\r\n// 获取属性并处理类型\r\n            function getProp(optionsPropertyObj, rel) {\r\n\r\n                let afterKeys = keys.filter(item => rel.test(item) && !/(ref|class|key|style)$/.test(item));\r\n                afterKeys.forEach(item => {\r\n                    let afterItem = item.replace(rel, \"\");\r\n                    let value = obj.attributes[item];\r\n                    // 处理布尔类型\r\n                    if (value === \"false\") {\r\n                        optionsPropertyObj[item] = false;\r\n                    } else if (value === \"true\") {\r\n                        optionsPropertyObj[item] = true;\r\n                    } else if (!isNaN(Number(value))) { // 检查是否为数字\r\n                        optionsPropertyObj[item] = Number(value); // 转换为数字\r\n                    } else { // 其他情况，假设是绑定的属性\r\n                        if (vue[value]) {\r\n                            optionsPropertyObj[afterItem] = vue[value]; // 绑定属性\r\n                            vue.$watch(value, {\r\n                                handler(n, o) {\r\n                                    myComp[afterItem] = vue[value];\r\n                                    myComp.$forceUpdate();\r\n                                }, deep: true,\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n// 匹配以 : 或 v-bind 开头的属性绑定，但排除掉 ref、class、key、style\r\n            getProp(props, /^(:|v-bind:)/);\r\n            // 单独处理 ref, class, key, style 属性\r\n            let refValue = keys.filter(item => /^(:|v-bind:)*ref$/.test(item))[0];\r\n            if (refValue) {\r\n                if (vue[obj.attributes[refValue]]) {\r\n                    ref = vue[obj.attributes[refValue]];\r\n                } else {\r\n                    ref = obj.attributes[refValue];\r\n                }\r\n            }\r\n            let keyValue = keys.filter(item => /^(:|v-bind:)*key$/.test(item))[0];\r\n            if (keyValue) {\r\n                if (vue[obj.attributes[keyValue]]) {\r\n                    key = vue[obj.attributes[keyValue]];\r\n                } else {\r\n                    key = obj.attributes[keyValue]\r\n                }\r\n            }\r\n            //处理原生属性\r\n            keys.filter(item => !/^(@|:|v-)/.test(item)).forEach(item => {\r\n                attrs[item] = obj.attributes[item]\r\n            })\r\n            let options = {on, props, nativeOn, attrs, ref, key};\r\n            if (JSON.stringify(on) === JSON.stringify({})) {\r\n                delete options.on;\r\n            }\r\n            if (JSON.stringify(nativeOn) === JSON.stringify({})) {\r\n                delete options.nativeOn;\r\n            }\r\n            //生成虚拟dom\r\n            obj._vnodeConfig = [obj.tagName, options];\r\n        }\r\n        if (obj.content) {\r\n            //如果是文本节点，\r\n            obj._vnodeConfig = [obj.content];\r\n        }\r\n    })\r\n    //拼接vnode\r\n    let vNodesTree = concatVNodes(tree[0]);\r\n    //挂载组件\r\n    myComp = new Compoent({\r\n        _isComponent: true, parent: vue, _parentVnode: vNodesTree\r\n    }).$mount(elString);\r\n\r\n\r\n    function concatVNodes(node, isOneLevel = true) {\r\n        if (!node || !node._vnodeConfig) {\r\n            return '';\r\n        }\r\n        if (isOneLevel) {\r\n            node._vnodeConfig[0] = compoenent;\r\n        }\r\n\r\n        // let result = node._vnode;\r\n\r\n        if (node.children && node.children.length > 0) {\r\n            let childrenVnod = [];\r\n            node.children.forEach(child => {\r\n                childrenVnod.push(concatVNodes(child, false));\r\n            });\r\n            return vue.$createElement(...node._vnodeConfig, childrenVnod)\r\n        } else {\r\n            //末级节点\r\n            if (node._vnodeConfig.length !== 1) {\r\n                return vue.$createElement(...node._vnodeConfig)\r\n            } else {\r\n                return node._vnodeConfig;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseHTML(htmlString) {\r\n    const stack = [];\r\n    const root = {tagName: 'root', attributes: {}, children: []};\r\n    let current = root;\r\n    stack.push(current);\r\n\r\n    const regex = /<([a-zA-Z0-9]+)([^>]*)>|<\\/([a-zA-Z0-9]+)>|([^<>]+)/g;\r\n\r\n    let match;\r\n\r\n    while ((match = regex.exec(htmlString)) !== null) {\r\n        const [text, openTag, attributes, closeTag, plainText] = match;\r\n        if (openTag) {\r\n            const node = {tagName: openTag, attributes: parseAttributes(attributes), children: []};\r\n            current.children.push(node);\r\n            stack.push(node);\r\n            current = node;\r\n        } else if (closeTag) {\r\n            stack.pop();\r\n            current = stack[stack.length - 1];\r\n        } else if (plainText && plainText.trim()) {\r\n            current.children.push({content: plainText.trim()});\r\n        }\r\n    }\r\n\r\n    return root.children;\r\n}\r\n\r\nfunction parseAttributes(attributeString) {\r\n    const attributes = {};\r\n    const attrRegex = /([^=\\s]+)\\s*=\\s*(['\"])(.*?)\\2|\\b([^=\\s]+)\\b/g;\r\n\r\n    let match;\r\n    while ((match = attrRegex.exec(attributeString)) !== null) {\r\n        const [, name, quote, value] = match;\r\n        if (name && value !== undefined) {\r\n            attributes[name] = value;\r\n        } else if (name) {\r\n            // 处理没有指定值的属性\r\n            attributes[name] = true;\r\n        }\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n//递归函数\r\nfunction dealTree(tree, callback) {\r\n    if (Array.isArray(tree) && tree.length !== 0) {\r\n        tree.forEach(item => {\r\n            callback(item, tree);\r\n            if (item?.children?.length > 0) {\r\n                dealTree(item.children, callback);\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}