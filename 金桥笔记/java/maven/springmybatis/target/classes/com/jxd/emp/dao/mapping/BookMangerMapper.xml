<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 目前可以自定义要唯一，将来面向接口编程时对应dao接口，一 接口，一
个 个mapper 相当于一个dao 接口的实现类 -->
<!--namespace翻译过来叫命名空间，拥有唯一的值，值是dao接口的全限定名称（包名加类名）-->
<!--mapper根标签，-->
<mapper namespace="com.jxd.emp.dao.IBookMangerDao">
<!--    select表示查询操作
          id属性：要执行sql语句的唯一标识，要求使用接口定义的抽象方法的名称-->
<!--
 List<VoBook> selectMore(String snakey, Integer typeno);
-->
<!--    resultType 返回类型；或者返回值为集合时，是集合的泛型类型，查询必须要写resulType-->
    <select id="selectMore" resultType="voBook">
        select bookno,booksname,eitor,puber,pubdate,booknum,bookpri,typename,b.typeno from bookmanger b left join booktype t on b.typeno = t.typeno
        <where>
            <if test="snakey != null and snakey != ''">
                booksname like '%' #{snakey} '%'
            </if>
            <if test="typeno != null and typeno != ''">
                and typeno = #{typeno}
            </if>
        </where>
    </select>

<!--     Emp getEmpByNameAndJob(String ename,String job);-->
<!--    传入一个简单类型的参数时，获取参数可以写完#{任意字符}-->
<!--    传入多个简单类型的参数时，mybatis会将这些参数封装起来
key:arg0 arg1 arg2 ···
key:param1 param2 param3 ···
value 会按照书写顺序写入这些map元素中-->
</mapper>

